# 笔记

## ref属性
    1.被用来给元素或子组件注册引用信息（id 的替代者）
    2.应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）
    3.使用方式：
        打标识：<h1 ref="xxx">.....</h1> 或 <School ref = "xxx"></School>
        获取：this.$refs.xxx

## mixin(混入)

    功能：可以把多个组件共用的配置提取成一个混入对象
    使用方式：
        第一步定义混合，例如：
            {
                data（）{

                }，
                methods：{

                }
            }
        第二步使用混入，例如：
            1、全局混入：Vue.mixin(xx)
            2、局部混入：mixins:['xxx']


## 插件
    功能：用于增强Vue
    本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。
    定义插件：
        对象.install = function(Vue,options){

        }
    使用插件Vue.use()

## 总结TodoList案例
    1、组件化编码流程：
        1、拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突
        2、实现动态组件：考虑号数据的存放位置，数据是一个组件在用，还是一些组件在用：
            1、一个组件在用：放在组件自身即可。
            2、一些组件在用：放在他们共同的父组件上（状态提升)
        3、实现交互：从绑定事件开始。
    2、props适用于：
        1、父组件==》子组件 通信
        2、子组件==》父组件 通信（要求父先给子一个函数）
    3、使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！
    4、props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。


## 组件的自定义事件
    1、一种组件间的通信方式，适用于：子组件===》父组件
    2、使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（事件的回调在A中）。
    3、绑定自定义事件：
        1、第一张方式，在父组件中：<Demo @atguigu="test"/>或者<Demo v-on:atguigu="test"/>
        2、第二种方式，在父组件中：
        <Demo ref="demo"/>
        .......
        mounted(){
            this.$refs.xxx.$on('atguigu',this,test)
        }
        3、若想让自定义事件只能触发一次，可以使用once修饰符或者$once方法。
    4、触发自定义事件：this.$emit('atguigu',数据)
    5、解绑自定义事件：this.$off('atguigu')
    6、组件上也可以绑定原生dom事件，需要使用native修饰符
    7、注意：通过this.$refs.xxx.$on('atguigu',回调)绑定自定义事件时，回调要么配置在methods中，要么用箭头函数，否则this的指向会出问题！


## 全局事件总线（GlobalEventBus）
    1、一种组件间的通信方式，适用于任意组件间的通信
    2、安装全局事件总线：
        new Vue（{
            .....
            beforeCreate(){
                Vue.prototype.$bus=this//安装全局事件总线，$bus就是当前应用的vm
            },
            ......
        }）

    3、使用事件总线：
        1、接受数据：A组件想接受数据，则在A组件中给$bus绑定自定义事件，事件的回调留在A组件自身。
        methods(){
            demo(data){.....}
        }
        .....
        mounted(){
            this.$bus.$on('xxxx',this.demo)
        }
        2、提供数据：this.$bus.$emit('xxxx',数据)
    4、最好在beforDestroy钩子中，用$off去解绑当前组件所用到的事件。


## 消息订阅与发布（pubsub）
    1、一种组件间通信的方式，适用于任意组件间通信
    2、使用步骤：
        1、安装pubsub：npm i pubsub-js
        2、引入 import pubsub from ‘pubsub-js’
        3、接受数据：A组件想接受数据，则在A组件中订阅消息，订阅的回调留在A组件自身
        methods（）{
            demo（data）{}
        }

        mounted（）{
            this.pid = pubsub.subscribe('xxx',this.demo)订阅消息
        }
        4、提供数据：pubsub.publish('xxx',数据)
        5、最好在beforeDestroy钩子中，用PubSub.unsubscribe(pid)去取消订阅

## nextTick
    1、语法：this.$nextTick（回调函数）
    2、作用：在下一次DOM更新结束后执行其指定的回调。
    3、什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行

## Vue封装的过度与动画
    1、作用：在插入、更新或者移除DOM元素时，在合适的时候给元素添加样式类名
    3、写法：：
        1、准备好样式：
            元素进入的样式：
                1、v-enter：进入的起点
                2、v-enter-active：进入过程中
                3、v-enter-to：进入的终点
            元素离开的样式
                1、v-leave：离开的起点
                2、v-leave-active：离开过程中
                3、v-leave-to：离开的终点
        2、使用<transition>包裹要过度的元素，并配置name属性：
            <transition name="hello">
                <h1 v-show="isShow">你好啊！<h1/>
            </transition>
        3、备注：若有多个元素要过度，则需要使用：<transition-group>,且每个元素都要指定的key值。

## Vue脚手架配置代理
    方法一
    在vue.config.js中添加如下配置：
    devServer:{
        proxy:"http://localhost:5000"
    }
    说明：
        1、优点：配置简单，请求资源时直接发给前端(8080)即可
        2、缺点：不能配置多个代理服务器，不能灵活的控制请求是否走代理。
        3、工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器（优先匹配前端资源）
    方法二
    编写vue.config.js配置具体代理规则：
    module.exports = {
        devServer: {
            proxy: {
            '/api': {
                target: '<url>',
                pathRewrite:{'^/api':''}
                ws: true,
                changeOrigin: true
            },
            '/foo': {
                target: '<other_url>',
                pathRewrite:{'^/foo':''}
            }
            }
        }
    }

##  插槽
    1、作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于父组件===》子组件
    2、分类：默认插槽、具名插槽、作用域插槽
    3、使用方式：
        1、默认插槽：
            父组件中：
                <Category>
                    <div>html结构</div>
                </Category>
            子组件中：
                <template>
                    <div>
                        <slot>插槽内容</slot>
                    </div>
                </template>
        2、具名插槽：
            父组件中：
                <Category>
                    <template slot="center">
                         <div>html结构1</div>
                    </template>
                </Category>

                <Category>
                    <template v-slot="footer">
                         <div>html结构2</div>
                    </template>
                </Category>
            子组件中：
                <template>
                    <div>
                        <slot name="center">插槽内容</slot>
                        <slot name="footer">插槽内容</slot>
                    </div>
                </template>
        3、作用域插槽
            1、理解：数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。（games数据在Category组件中，但使用数据所遍历出来的结构由app组件决定）
            2、具体编码：
            父组件中：
                <Category>
                    <template scope="scopeData">
                        <ul>
                            <li v-for="g in scopeData.games" :key="g">{{g}}</li>
                        </ul>
                    </template>
                </Category>

                <Category>
                    <template scope="scopeData">
                        
                            <h4 v-for="g in scopeData.games" :key="g">{{g}}</h4>
                    
                    </template>
                </Category>
            子组件中：
                <template>
                    <div>
                        <slot :games="games">插槽内容</slot>
                    </div>
                </template>
                   <script>
                    export default {
                        name:'Category',
                        props:['title'],
                        data() {
                        return {
                        games: ["红色警戒", "穿越火线", "劲舞团", "超级玛丽"],
                        };
                    },
                    }
                    </script>

## Vuex
    1、概念
        在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读\写）,也是一种组件间通信的方式，且适用于任意组件间通信
    2、何时使用？
        多个组件需要共享数据时
    3、搭建vuex环境
        1、创建文件：src/store/index.js
        2、在main.js种创建vm时传入store配置项

    4.基本使用：
        1、组件中读取vuex中的数据:$store.state.sum
        3、组件中修改vuex中的数据：$store.dispatch('action中的方法名',数据)或$store.commit('mutation中的方法名',数据)

    5、getters的使用
        1、概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。
        2、在store.js中追加getters配置

        3、组件中读取数据：$store.getters.bigSum
    6、四个map方法的使用
        1、mapState方法：用于帮助我们映射state中的数据为计算属性

        借助mapState生成计算属性，从state中读取数据。（对象写法）
        ...mapState({sum:'sum',subject:'subject',school:'school'}),
        借助mapState生成计算属性，从state中读取数据。（数组写法）
        ...mapState(['sum','school','subject']),

        2、mapGetters方法：用于帮助我们映射getters中的数据为计算属性

        借助mapGetters生成计算属性，从Getters中读取数据。（对象写法）
        ...mapGetters({'bigSum'}),

        借助mapGetters生成计算属性，从Getters中读取数据。（数组写法）
        ...mapGetters(['bigSum']),

        3、mapActions方法：用于帮助我们生成与actions对话的方法，即：包含$store.dispatch(xxx)的函数

        借助mapActions生成对应方法，方法中会调用dispatch去联系actions(对象写法)
        ...mapActions({incrementOdd:'jiaOdd',incrementWait:'jiaWait'})
        借助mapActions生成对应方法，方法中会调用dispatch去联系actions(数组写法)
         ...mapActions(['jiaOdd','jiaWait'])

        4、mapMutations方法：用于帮助我们生产与mutations对话的方法，即：包含$store.commit(xxx)的函数

        借助mapMutations生成对应的方法，方法中会调用commit去联系mutations（对象写法） 
        ...mapMutations({increment:'JIA',decrement:'JIAN'}),
        借助mapMutations生成对应的方法，方法中会调用commit去联系mutations（数组写法） 
        ...mapMutations(['JIA','JIAN']),

    7、模块化+命名空间
        1、目的：让代码更好维护,让多种数据分类更加明确。
        2、修改store.js
            求和功能相关的配置
            const countOptions = {
                namespaced:true, 开启命名空间
                actions: {
                    jiaOdd(context, value) {
                        if (context.state.sum % 2) {
                            context.commit('JIA', value)
                        }
                    }, jiaWait(context, value) {
                        setTimeout(() => {
                            context.commit('JIA', value)
                        }, 500);
                    }
                },
                mutations: {
                    JIA(state,value) {
                        state.sum += value
                    },
                    JIAN(state,value) {
                        state.sum -= value
                    },
                },
                state: {
                    sum: 0,//当前的和
                school: '尚硅谷',
                subject: '前端',
                },
                getters: {
                    bigSum(state) {
                        return state.sum*10
                    }
                },
            }

            
                //创建store并暴露
                export default new Vuex.Store({
                    modules: {
                        countAbout: countOptions,
                        personAbout: personOptions,
                    }
                })


        3、开启命名空间后，组件中读取state数据：

## 路由
    1、理解：一个路由就是一组映射关系，多个路由需要路由器进行管理
    2、前端路由：key是路径，value 是组件

    1、基本使用
        1、安装vue-router 命令：npm i vue-router
        2、应用插件：Vue.use(VueRouter)
        3、编写router配置项：
            //该文件专门用于创建整个应用的路由器
                import VueRouter from 'vue-router'
                import About from '../components/About'
                import Home from '../components/Home'
                //创建一个路由器并暴露
                export default new VueRouter({
                    routes: [
                        {
                            path: '/about',
                            component:About
                        },
                        {
                            path: '/Home',
                            component:Home
                        },
                    ]
                })
        4、实现切换（avtive-class可以配置动态高亮样式）
                <router-link class="list-group-item" active-class="active" to="/about">About</router-link>
        5、指定展示位置
         <router-view>
         </router-view>

    2、几个注意点
        1、路由组件通常存放在pages文件夹，一般组件通常存放在components文件夹。
        2、通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。
        3、每个组件都有自己的$route属性，里面存储着自己的路由信息。
        4、整个应用只有一个router，可以通过组件的$route
    3、多级路由
        1、配置路由规则,使用children配置项：
             routes: [
                    {
                        path: '/about',
                        component:About
                    },
                    {
                        path: '/Home',
                        component: Home,
                        children:[
                            {
                                path: 'news', //此处一定不要写：/news
                                component:News,
                            },
                            {
                                path: 'Message',
                                component:Message,
                            }
                        ]
                    },
                    
                ]
        2、跳转（要写完整路径）
          <router-link class="list-group-item" active-class="active" to="/home/message">Message</router-link>
    4、路由的query参数
        1、传递参数
        <!-- 跳转路由并携带query参数，to的字符串写法 -->
          <!-- <router-link :to="`/home/message/detail?id=${m.id}&title=${m.title}`">{{m.title}}</router-link>&nbsp;&nbsp; -->

          <!-- 跳转路由并携带query参数，to的对象写法 -->
          <router-link 
          :to="{
              path:'/home/message/detail',
              query:{
                  id:m.id,
                  title:m.title
              },

          }">
          {{m.title}}
          </router-link>&nbsp;&nbsp;
        2、接受参数
        <li>消息标号：{{$route.query.id}}</li>
        <li>消息标题：{{$route.query.title}}</li>
    5、命名路由
        1、作用:可以简化路由的跳转
        2、如何使用
            1、给路由命名：
            routes: [
                    {
                        name:'guanyu',
                        path: '/about',
                        component: About
                    },
                    {
                        
                        path: '/home',
                        component: Home,
                        children: [
                            {
                                path: 'news',
                                component: News,
                            },
                            {
                                path: 'message',
                                component: Message,
                                children: [
                                    {
                                        name:'xiangqing',
                                        path: 'detail',
                                        component: Detail,
                                    }
                                ]
                            }
                        ]
                    },

                ]
            2、简化跳转：
                <router-link class="list-group-item" active-class="active" :to="{name:'guanyu'}">About</router-link>
        7、路由的props配置
            作用：让路由组件更方便的收到参数
                         {
                            name:'xiangqing',
                            path: 'detail/:id/:title',
                            component: Detail,
                            // props的第一种写法,值为对象，该对象种的所有key-value都会以props的形式传给Detail组件
                            // props: {
                            //     a: 1,
                            //     b:'hello'
                            // }

                            //props的第二种写法，值为布尔值，若布尔值为真，就会把该路由组件收到的所有params参数，以props的形式传给Detail组件
                            // props:true

                            // props第三种写法，值为函数
                            props($router) {
                                return {id:$router.query.id,title:$router.query.title}
                            }
                        }
        8、<router-link>的replace属性
            1、作用：控制路由跳转时操作浏览器历史记录的模式
            2、浏览器的历史记录有两种写入方式：分别为push和replace，push是追加历史记录，replace是替换当前记录。路由跳转时候默认为push
            3、如何开启replace模式：<router-link replace .....>news</router-link>
        9、编程式路由导航
            1、作用：不借助<router-link>实现路由跳转，让路由跳转更加灵活
            2、具体编码：
                  pushShow(m){
                                    this.$router.push({
                                        name:'xiangqing',
                                        query:{
                                        id:m.id,
                                        title:m.title
                                    },
                                    })
                                },
                                replaceShow(m){
                                    this.$router.replace({
                                        name:'xiangqing',
                                        query:{
                                        id:m.id,
                                        title:m.title
                                    },
                                    })
                                }
        10、缓存路由组件
            1、作用：让不展示的路由组件保持挂载，不被销毁。
            2、具体编码：
            <keep-alive include="News">
                <router-view></router-view>
            </keep-alive>
        11、两个新的生命周期钩子
            1、作用 ：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。
            2、具体名字：
                1、activated路由组件被激活时触发。
                2、deactivated路由组件失活时触发。
        12、路由守卫
            1、作用：对路由进行权限控制
            2、分类：全局守卫、独享守卫、组件内守卫
            3、全局守卫：
                //全局前置路由守卫----初始化的时候被调用，每次路由切换之前被调用
                router.beforeEach((to, from, next) => {
                    
                    if (to.meta.isAuth) {//判断是否需要鉴权
                        if (localStorage.getItem('school') === 'atguigu') {
                        next()
                        } else {
                        alert('学校名不对')       
                    }
                    }else {
                        next()
                    
                    }
                    
                })

                //全局后置路由守卫----初始化的时候被调用，每次路由切换之后被调用
                router.afterEach((to, from, next) => {
                    document.title = to.meta.title || '路由' 
                })

                export default router
            4、独享守卫：
            beforeEnter:(to,from,next)=>{
                        if (to.meta.isAuth) {//判断是否需要鉴权
                                    if (localStorage.getItem('school') === 'atguigu') {
                                    next()
                                    } else {
                                    alert('学校名不对')       
                                }
                                }else {
                                    next()
                                
                                }
                    }
            5、组件内守卫
                //通过路由规则，进入该组件时被调用
                    beforeRouteEnter(to, from, next) {
                        if (to.meta.isAuth) {
                        //判断是否需要鉴权
                        if (localStorage.getItem("school") === "atguigu") {
                            next()
                        } else {
                            alert("学校名不对");
                        }
                        } else {
                        next();
                        }
                    },
                    //通过路由规则，离开该组件时被调用
                    beforeRouteLeave(to, from, next) {
                        next()
                    },
        13、路由器的两种工作模式
            1、对于一个url来说，hash值就是#后面的内容
            2、hash值不会包含在http请求中，即：hash值不会带给服务器。
            3、hash模式：
                1、地址中永远带着#，不美观
                2、若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。
                3、兼容性好。

            4、history模式：
                1、地址干净、美观。
                2、兼容性和hash模式相比略差
                3、应用部署上线时需要后端人员支持，解决刷新页面服务端404问题